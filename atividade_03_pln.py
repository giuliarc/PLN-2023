# -*- coding: utf-8 -*-
"""Atividade 03 - PLN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DBdrz04WbrpUSQFHyui0LdGjhKEHmps8

# **Processamento de Linguagem Natural [2023.Q3]**
Prof. Alexandre Donizeti Alves

### **ATIVIDADE PRÁTICA 03 [Tutorial sobre uma API]**

---

A **ATIVIDADE PRÁTICA 03** deve ser feita utilizando o **Google Colab** com uma conta
sua vinculada ao Gmail. O link do seu notebook, armazenado no Google Drive, além do link de um repositório no GitHub e os principais resultados da atividade, devem ser enviados usando o seguinte formulário:

> https://forms.gle/nPsWnUuE5GCeXaiU8 (**AINDA EM CONSTRUÇÃO**)


**IMPORTANTE**: A submissão deve ser feita APENAS POR UM INTEGRANTE DA EQUIPE até o dia 02/11 (quinta-feira - até às 23h59). Por favor, lembre-se de dar permissão de ACESSO IRRESTRITO para o professor da disciplina de PLN.

### **EQUIPE**

---

**POR FAVOR, PREENCHER OS INTEGRANDES DA SUA EQUIPE:**


**Integrante 01:**

Giulia Ribeiro de Carvalho - 11019616

### **API**
---

**QUAL A API SELECIONADA POR SUA EQUIPE?**

`API: ` Wikipedia (MediaWiki API)

`Site oficial: ` https://pt.wikipedia.org/wiki/Wikip%C3%A9dia:Central_de_pesquisas/Portal_de_dados/API

`Link para a documentação oficial:` https://en.wikipedia.org/w/api.php

### **DESCRIÇÃO**
---

Implementar um `notebook` no `Google Colab` para demonstrar passo a passo como usar uma determinada **API** em `Python`, ou seja, criar um **TUTORIAL** destacando desde a instalação e configuração da **API** até as principais finalidades. O **TUTORIAL** deve ser o mais completo possível, com diversos exemplos de uso e permitindo ser facilmente reproduzido.

A **API** deve ser selecionada na seguinte planilha:

https://docs.google.com/spreadsheets/d/1-Q1szJ3UmoE2_3LtcRQyqid5fPIcnpsR3XAPnoxLj2o/edit?usp=sharing

>

**IMPORTANTE:** É obrigatório usar o e-mail da UFABC.

>

**DICA:** Por favor, insira o seu nome ou da sua equipe na ordem definida na planilha. A escolha da **API** deve ser feita de acordo com a lista disponibilizada na planilha. Cada **API** só pode ser escolhida por, no **MÁXIMO**, 2 equipes.

### **ROTEIRO PARA APRESENTAÇÃO DE UMA API**

---
>


**IMPORTANTE**: consulta feita no ChatGPT

>

Como escrever um tutorial sobre uma API em Python usando o Google Colab com foco nas etapas essenciais. Aqui está um guia rápido:

>

* **Passo 01: Introdução**

  >  Apresente a API que você está explicando.

  >  Explique por que é útil ou relevante.

* **Passo 02: Configuração no Google Colab**

  > Explique como os leitores podem abrir um novo notebook no Google Colab.

  > Mostre como importar bibliotecas necessárias.

  > Instrua sobre como instalar quaisquer bibliotecas adicionais, se necessário.

* **Passo 03: Autenticação (se aplicável)**

  > Descreva como configurar a autenticação, caso a API exija.

  > Forneça orientações sobre a obtenção de chaves de API ou tokens.

* **Passo 04: Utilização Básica da API**

  > Demonstre como fazer uma solicitação simples à API.

  > Mostre como processar a resposta da API.

* **Passo 05: Exemplos Práticos**

  > Forneça exemplos práticos e úteis que os leitores podem seguir.

  > Mostre como aplicar a API em cenários do mundo real.


* **Passo 06: Considerações**

  > Recapitule os principais pontos do tutorial.

  > Incentive os leitores a explorar mais a API e experimentar por conta própria.

* **Passo 07: Publicação**

   > Considere compartilhar seu tutorial em plataformas como Medium, GitHub (obrigatório) ou seu blog pessoal.

* **Passo 08: Promoção**

  > Compartilhe seu tutorial nas redes sociais, grupos de desenvolvedores e fóruns relevantes.

**IMPORTANTE**: Lembre-se de manter o tutorial curto e direto ao ponto. Use exemplos de código eficazes e forneça informações práticas que os leitores possam seguir facilmente. O Google Colab é uma ótima plataforma para compartilhar tutoriais, pois permite que os leitores executem o código diretamente no navegador.

### **CRITÉRIOS DE AVALIAÇÃO**
---

As 3 equipes que **criarem os melhores tutoriais**  terão o peso diminuido na AVALIAÇÃO (Prova Escrita) em **25%** (caindo de 40 para 30).

**IMPORTANTE**: a diminuição no peso da AVALIAÇÃO será aplicado para todos os membros da equipe.

### **TUTORIAL**
---

## **MediaWiki** **API**

#### **INTRODUÇÃO**

O serviço de API (*application Programming Interface*) da Wikipedia permite que o usuário acesse diretamente o banco de dados do MediaWiki (Wikipedia).

A API permite executar tarefas de extração e manipulação de dados da Wiki, executando desde consultas simples em páginas até edições automáticas em documentos, a partir de requisições do tipo HTTP.

As informações acessadas através da API podem ser páginas e artigos, propriedades das páginas, metadados sobre a Wiki e usuários, dentre outras.

A utilização da API apresenta uma forma simplificada e flexível de obtenção de informações e dados da Wikipedia, dando ao usuário diversas possibilidades de manipulação de informações e integração com diferentes ferramentas e plataformas.

#### **CONFIGURAÇÃO**

##### As requisições da API podem ser feitas utilizando o método HTTP. Para isto, podemos configurar uma conexão usando a biblioteca *requests*
"""

! pip install requests

import requests

"""#### **AUTENTICAÇÃO**

A MediaWiki API também permite que os usuários efetuem a autenticação na plataforma. A autenticação não é obrigatória para a utilização da API, mas mostra-se necessária para realizar tarefas como edição e modificação de conteúdo, por exemplo.

Mais detalhes sobre autenticação podem ser consultados em: https://www.mediawiki.org/wiki/API:Login

Abaixo, temos um exemplo simples de como configurar a autenticação na plataforma. No caso, o código disponibilizado pela própria documentação da MediaWiki API (https://www.mediawiki.org/wiki/API:Login#Example_1:_Process_for_a_wiki_without_special_authentication_extensions) foi adaptado, já que no Colab não implementamos a ferramenta Flask (utilizada para aplicações web).

**Lembre-se que, para códigos que serão compartilhados, o ideal é utilizar métodos seguros de autenticação para evitar exposição indevida de credenciais.**
"""

import requests

URL = "https://en.wikipedia.org/w/api.php"
S = requests.Session()

def start_client_login(username, password):
    """ Simulando o login na API da Wikipedia """

    login_token = fetch_login_token()

    response = S.post(url=URL, data={
        'action': "clientlogin",
        'username': username,
        'password': password,
        'loginreturnurl': 'http://127.0.0.1:5000/',
        'logintoken': login_token,
        'format': "json"
    })

    data = response.json()

    if data.get('clientlogin', {}).get('status') == 'PASS':
        return 'Login success! Welcome, ' + data['clientlogin']['username']
    else:
        return 'Oops! Something went wrong -- ' + data['clientlogin']['messagecode']

def fetch_login_token():
    """ Simulando a obtenção de um token de login via `tokens` module """

    response = S.get(
        url=URL,
        params={
            'action': "query",
            'meta': "tokens",
            'type': "login",
            'format': "json"
        })
    data = response.json()
    return data['query']['tokens']['logintoken']

# Utilizando a função para efetuar o login.
## LEMBRE-SE DE NÃO DEIXAR SUA SENHA PESSOAL EXPOSTA AO COMPARTILHAR O CÓDIGO ##

# Exemplo de uso
username = "meu-usuario"
password = "minha-senha-de-login-na-wikipedia"
result = start_client_login(username, password)
print(result)

"""#### **UTILIZAÇÃO BÁSICA**

Para o teste de utilização básica da API, iremos utilizar a URL principal da versão da Wikipedia em português.
Caso desejemos, é possível realizar a busca em outras das diversas versões da Wiki em diferentes idiomas, bastaria alterar a URL para a versão com o idioma desejado, por exemplo "https://en.wikipedia.org/w/api.php" para a Wiki em inglês.
"""

# Criando uma função básica que faz uma requisição simples à API e testando conexão


def consulta_basica_wiki(busca):

  """
  Realiza uma busca à API da Wikipedia por meio de requisição HTTP e verifica
  se a requisição foi bem sucedida.

  Argumentos:
  busca(str): Refere-se ao elemento a ser buscado na Wikipedia

  Retorna:
  str: O conteúdo do artigo correspondente ao elemento pesquisado.
       Retona uma mensagem de erro caso não seja encontrado o elemento.

  """

  url_principal = "https://pt.wikipedia.org/w/api.php"

  parametros = {
      "action": "query",
      "format": "json",
      "prop": "extracts",
      "titles": busca,
      "formatversion": "2"
  }

  resposta = requests.get(url_principal, params=parametros)

  if resposta.status_code == 200:
    try:
      dados = resposta.json()
      conteudo = dados['query']['pages'][0]['extract']
      return conteudo
    except (KeyError, IndexError) as e:
      return f"Falha ao pesquisar por '{busca}'"
  else:
    return "Falha ao recuperar conteúdo da Wikipedia"

"""A API permite a configuração de diversos parâmetros de busca. No exemplo acima, **action** define qual a ação a ser realizada na API; **format** especifica o formato de resposta desejada; **prop** define as propriedades que devem ser retornadas no(s) artigo(s) buscado(s); **titles** refere-se ao título/elemento a ser pesquisado; **formarversion** define a versão do formato de resposta desejado."""

# Testanto a função de requisição básica

pesquisa = "Brasil"
artigo = consulta_basica_wiki(pesquisa)
print(artigo)

"""#### **EXEMPLOS PRÁTICOS**

**Páginas mais visitadas**

De forma bem simples, podemos utilizar a API da Wikipedia para extrair as páginas mais visitadas nas últimas 24h.

Este resultado pode ser importante para diversas
"""

def mais_visitadas(language_code, limit):

    url = f"https://{language_code}.wikipedia.org/w/api.php"

    params = {
        "action": "query",
        "format": "json",
        "list": "mostviewed",
        "pvimlimit": limit  # Define o número de páginas mais visitadas a serem retornadas
    }

    response = requests.get(url, params=params)
    data = response.json()

    if 'query' in data and 'mostviewed' in data['query']:
        most_viewed_pages = data['query']['mostviewed']
        return [page['title'] for page in most_viewed_pages]
    else:
        return None

"""Observamos que, configurando os parâmetros *language_code* podemos definir em qual idioma iremos fazer a busca, e em *limit*, estabelecemos os primeiros n resultados (no caso, as n primeiras páginas mais visitadas nas últimas 24h)."""

# Utilizando a função das páginas mais visitadas
paginas_mais_visitadas = mais_visitadas(language_code='pt', limit=10)

if paginas_mais_visitadas:
    for page in paginas_mais_visitadas:
        print(page)
else:
    print("Falha ao obter as páginas mais visitadas.")

"""**Resumo de artigos**

A MediaWiki API apresenta um endpoint que permite a busca por artigos resumidos na Wikipedia. A utilização de artigos resumidos pode ser útil para Análise e Processamento de Linguagem Natural, ou ainda, para diversas tarefas nas quais deseja-se apresentar uma breve introdução sobre determinado tema.

No exemplo abaixo, o parâmetro "**exintro**" é responsável por retornar somente o texto introdutório de um determinado artigo, enquanto o "**explaintext**" garante que o conteúdo retornado esteja na formatação simples, melhorando a legibilidade do texto.
"""

def resumo_artigo(titulo, language):

    url = f"https://{language}.wikipedia.org/w/api.php"


    params = {
        "action": "query",
        "format": "json",
        "titles": titulo,
        "prop": "extracts",
        "exintro": True,  # Obtém apenas o texto introdutório
        "explaintext": True  # Retorna o texto sem formatação
    }

    response = requests.get(url, params=params)
    data = response.json()


    if 'query' in data and 'pages' in data['query']:
        page_id = list(data['query']['pages'].keys())[0]
        if 'extract' in data['query']['pages'][page_id]:
            return data['query']['pages'][page_id]['extract']

    return "Resumo não encontrado."

"""Podemos obter o resumo dos mais variados artigos da Wiki inserindo seu título e idioma de busca (no parâmetro "*language*"). Para melhorar a visualizaçao do conteúdo, iremos enviar o resultado da pesquisa para um arquivo no formato .txt)."""

# Utilizando a função para retornar o resumo sobre determinado tema. Por exemplo: Gaiola de Faraday

titulo = 'Gaiola de Faraday' #Insira o tema que deseja buscar
resumo = resumo_artigo(titulo, language='pt')

#print(resumo) #Descomentar para obter o resumo "printado".

# Formatando o título buscado e salvando o resultado em um arquivo de texto
with open(f"resumo-{titulo.lower().replace(' ', '-')}.txt", 'w', encoding='utf-8') as arquivo:
  arquivo.write(resumo)
  print(f"Resumo salvo no arquivo resumo-{titulo.lower().replace(' ', '-')}.txt")

"""#### **CONSIDERAÇÕES**

Neste tutorial, pudemos verificar de forma resumida, a utilização da MediaWiki API e implementação em tarefas simples.
Vimos que, a partir da utilização de apenas uma biblioteca (*requests*) pudemos obter informações sobre diferentes temas, tendo ainda a opção de configurar o idioma de busca.

A MediaWiki API apresenta uma série de recursos que podem ser de grande utilidade para a obtenção de informações, dados analíticos e extração de texto para aplicação de técnicas de estudo e análise textual.
Visto que a Wikipedia é uma das maiores enciclopédias atualmente, torna-se extremamente vantajoso ter a possibilidade de manipular esta vasta quantidade de informação - sejam textos, imagens, ou ainda, metadados - de forma flexível e repleta de recursos e ferramentas para integração.

**REFERÊNCIAS**

---

[How To Use The Wikipedia API](https://medium.com/codesnippet/how-to-use-the-wikipedia-api-f5d4e4611b8e)

[Getting started with Wikimedia APIs](https://api.wikimedia.org/wiki/Getting_started_with_Wikimedia_APIs)

[Wikipédia:Central de pesquisas/Portal de dados/API](https://pt.wikipedia.org/wiki/Wikip%C3%A9dia:Central_de_pesquisas/Portal_de_dados/API)
"""